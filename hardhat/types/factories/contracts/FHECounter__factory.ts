/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  FHECounter,
  FHECounterInterface,
} from "../../contracts/FHECounter";

const _abi = [
  {
    inputs: [
      {
        internalType: "externalEuint32",
        name: "inputEuint32",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "inputProof",
        type: "bytes",
      },
    ],
    name: "decrement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCount",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "externalEuint32",
        name: "inputEuint32",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "inputProof",
        type: "bytes",
      },
    ],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5061018a6100ae604080516080810182525f808252602082018190529181018290526060810191909152506040805160808101825273687820221192c5b662b25367f70076a37bc79b6c815273848b0066793bcc60346da1f49049357399b8d595602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b61074b806101975f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80635941195d1461004e578063a87d942c14610063578063da1f12ab14610078578063e055f8f914610080575b5f80fd5b61006161005c36600461060c565b610093565b005b5f545b60405190815260200160405180910390f35b612711610066565b61006161008e36600461060c565b610100565b5f6100d38484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061014d92505050565b90506100e05f5482610161565b5f8190556100ed9061018f565b506100f95f543361019e565b5050505050565b5f6101408484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061014d92505050565b90506100e05f54826101b0565b5f61015a838360046101de565b9392505050565b5f82610173576101705f6102fe565b92505b81610184576101815f6102fe565b91505b61015a83835f610316565b5f61019a8230610411565b5090565b5f6101a98383610411565b5090919050565b5f826101c2576101bf5f6102fe565b92505b816101d3576101d05f6102fe565b91505b61015a83835f61049a565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163196d0b9b60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b039091169063196d0b9b906102579088903390899089906004016106a1565b6020604051808303815f875af1158015610273573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102979190610713565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec906044015f604051808303815f87803b1580156102e0575f80fd5b505af11580156102f2573d5f803e3d5ffd5b50505050509392505050565b5f6103108263ffffffff16600461054f565b92915050565b5f8082156103295750600160f81b61032c565b505f5b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497015460405163022f65e760e31b815260048101879052602481018690527fff00000000000000000000000000000000000000000000000000000000000000831660448201527f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b03169063117b2f38906064015b6020604051808303815f875af11580156103e3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104079190610713565b9695505050505050565b5f7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497008054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b62906044015f604051808303815f87803b15801561047f575f80fd5b505af1158015610491573d5f803e3d5ffd5b50505050505050565b5f8082156104ad5750600160f81b6104b0565b505f5b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649701546040516303056db360e31b815260048101879052602481018690527fff00000000000000000000000000000000000000000000000000000000000000831660448201527f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b03169063182b6d98906064016103c7565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f917f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700916001600160a01b0390911690639cd07acb906105c4908790879060040161072a565b6020604051808303815f875af11580156105e0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106049190610713565b949350505050565b5f805f6040848603121561061e575f80fd5b83359250602084013567ffffffffffffffff8082111561063c575f80fd5b818601915086601f83011261064f575f80fd5b81358181111561065d575f80fd5b87602082850101111561066e575f80fd5b6020830194508093505050509250925092565b6054811061069d57634e487b7160e01b5f52602160045260245ffd5b9052565b8481525f60206001600160a01b03861660208401526080604084015284518060808501525f5b818110156106e35786810183015185820160a0015282016106c7565b505f60a0828601015260a0601f19601f8301168501019250505061070a6060830184610681565b95945050505050565b5f60208284031215610723575f80fd5b5051919050565b8281526040810161015a602083018461068156fea164736f6c6343000818000a";

type FHECounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FHECounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FHECounter__factory extends ContractFactory {
  constructor(...args: FHECounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FHECounter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FHECounter__factory {
    return super.connect(runner) as FHECounter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FHECounterInterface {
    return new Interface(_abi) as FHECounterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): FHECounter {
    return new Contract(address, _abi, runner) as unknown as FHECounter;
  }
}
