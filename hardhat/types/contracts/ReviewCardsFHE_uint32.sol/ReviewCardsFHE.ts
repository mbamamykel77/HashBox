/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ReviewCardsFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createReviewCard"
      | "creationFee"
      | "getCardInfo"
      | "getEncryptedStats"
      | "getTotalCards"
      | "hasAddressVoted"
      | "hasVoted"
      | "nextCardId"
      | "owner"
      | "protocolId"
      | "reviewCards"
      | "setCreationFee"
      | "submitEncryptedRating"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CardCreated"
      | "CreationFeeChanged"
      | "FeesWithdrawn"
      | "RatingSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createReviewCard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCardInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasAddressVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCardId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEncryptedRating",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createReviewCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAddressVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextCardId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reviewCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEncryptedRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace CardCreatedEvent {
  export type InputTuple = [
    cardId: BigNumberish,
    creator: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    cardId: bigint,
    creator: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    cardId: bigint;
    creator: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreationFeeChangedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RatingSubmittedEvent {
  export type InputTuple = [
    cardId: BigNumberish,
    rater: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [cardId: bigint, rater: string, timestamp: bigint];
  export interface OutputObject {
    cardId: bigint;
    rater: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReviewCardsFHE extends BaseContract {
  connect(runner?: ContractRunner | null): ReviewCardsFHE;
  waitForDeployment(): Promise<this>;

  interface: ReviewCardsFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createReviewCard: TypedContractMethod<[], [void], "payable">;

  creationFee: TypedContractMethod<[], [bigint], "view">;

  getCardInfo: TypedContractMethod<
    [cardId: BigNumberish],
    [
      [bigint, string, boolean] & {
        createdAt: bigint;
        creator: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  getEncryptedStats: TypedContractMethod<
    [cardId: BigNumberish],
    [[string, string] & { sum: string; count: string }],
    "view"
  >;

  getTotalCards: TypedContractMethod<[], [bigint], "view">;

  hasAddressVoted: TypedContractMethod<
    [cardId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  nextCardId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  reviewCards: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean, bigint, string] & {
        id: bigint;
        encryptedSum: string;
        encryptedCount: string;
        exists: boolean;
        createdAt: bigint;
        creator: string;
      }
    ],
    "view"
  >;

  setCreationFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitEncryptedRating: TypedContractMethod<
    [cardId: BigNumberish, encryptedRating: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createReviewCard"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "creationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCardInfo"
  ): TypedContractMethod<
    [cardId: BigNumberish],
    [
      [bigint, string, boolean] & {
        createdAt: bigint;
        creator: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedStats"
  ): TypedContractMethod<
    [cardId: BigNumberish],
    [[string, string] & { sum: string; count: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalCards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasAddressVoted"
  ): TypedContractMethod<
    [cardId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextCardId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reviewCards"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean, bigint, string] & {
        id: bigint;
        encryptedSum: string;
        encryptedCount: string;
        exists: boolean;
        createdAt: bigint;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setCreationFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitEncryptedRating"
  ): TypedContractMethod<
    [cardId: BigNumberish, encryptedRating: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CardCreated"
  ): TypedContractEvent<
    CardCreatedEvent.InputTuple,
    CardCreatedEvent.OutputTuple,
    CardCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CreationFeeChanged"
  ): TypedContractEvent<
    CreationFeeChangedEvent.InputTuple,
    CreationFeeChangedEvent.OutputTuple,
    CreationFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RatingSubmitted"
  ): TypedContractEvent<
    RatingSubmittedEvent.InputTuple,
    RatingSubmittedEvent.OutputTuple,
    RatingSubmittedEvent.OutputObject
  >;

  filters: {
    "CardCreated(uint256,address,uint256)": TypedContractEvent<
      CardCreatedEvent.InputTuple,
      CardCreatedEvent.OutputTuple,
      CardCreatedEvent.OutputObject
    >;
    CardCreated: TypedContractEvent<
      CardCreatedEvent.InputTuple,
      CardCreatedEvent.OutputTuple,
      CardCreatedEvent.OutputObject
    >;

    "CreationFeeChanged(uint256)": TypedContractEvent<
      CreationFeeChangedEvent.InputTuple,
      CreationFeeChangedEvent.OutputTuple,
      CreationFeeChangedEvent.OutputObject
    >;
    CreationFeeChanged: TypedContractEvent<
      CreationFeeChangedEvent.InputTuple,
      CreationFeeChangedEvent.OutputTuple,
      CreationFeeChangedEvent.OutputObject
    >;

    "FeesWithdrawn(address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "RatingSubmitted(uint256,address,uint256)": TypedContractEvent<
      RatingSubmittedEvent.InputTuple,
      RatingSubmittedEvent.OutputTuple,
      RatingSubmittedEvent.OutputObject
    >;
    RatingSubmitted: TypedContractEvent<
      RatingSubmittedEvent.InputTuple,
      RatingSubmittedEvent.OutputTuple,
      RatingSubmittedEvent.OutputObject
    >;
  };
}
