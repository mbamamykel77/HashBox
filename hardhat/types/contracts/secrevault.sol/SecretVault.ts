/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SecretVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deleteSecret"
      | "getActiveSecrets"
      | "getAllSecrets"
      | "getSecret"
      | "getSecretCount"
      | "getSecretInfo"
      | "owner"
      | "protocolId"
      | "secretExistsForUser"
      | "setStorageFee"
      | "storageFee"
      | "storeSecret"
      | "updateSecret"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeesWithdrawn"
      | "SecretDeleted"
      | "SecretStored"
      | "SecretUpdated"
      | "StorageFeeChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deleteSecret",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSecrets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSecrets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecret",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecretCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecretInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secretExistsForUser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStorageFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storeSecret",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSecret",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSecrets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSecrets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSecret", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSecretCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecretInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "secretExistsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStorageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storageFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretDeletedEvent {
  export type InputTuple = [
    user: AddressLike,
    secretId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, secretId: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    secretId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretStoredEvent {
  export type InputTuple = [
    user: AddressLike,
    secretId: BigNumberish,
    label: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    secretId: bigint,
    label: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    secretId: bigint;
    label: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecretUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    secretId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, secretId: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    secretId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StorageFeeChangedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecretVault extends BaseContract {
  connect(runner?: ContractRunner | null): SecretVault;
  waitForDeployment(): Promise<this>;

  interface: SecretVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deleteSecret: TypedContractMethod<
    [secretId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveSecrets: TypedContractMethod<[], [bigint[]], "view">;

  getAllSecrets: TypedContractMethod<
    [],
    [[bigint[], bigint] & { secretIds: bigint[]; activeCount: bigint }],
    "view"
  >;

  getSecret: TypedContractMethod<[secretId: BigNumberish], [string], "view">;

  getSecretCount: TypedContractMethod<[], [bigint], "view">;

  getSecretInfo: TypedContractMethod<
    [secretId: BigNumberish],
    [
      [string, bigint, boolean] & {
        label: string;
        createdAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  secretExistsForUser: TypedContractMethod<
    [secretId: BigNumberish],
    [boolean],
    "view"
  >;

  setStorageFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  storageFee: TypedContractMethod<[], [bigint], "view">;

  storeSecret: TypedContractMethod<
    [encryptedSecret: BytesLike, inputProof: BytesLike, label: string],
    [void],
    "payable"
  >;

  updateSecret: TypedContractMethod<
    [secretId: BigNumberish, encryptedSecret: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deleteSecret"
  ): TypedContractMethod<[secretId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveSecrets"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllSecrets"
  ): TypedContractMethod<
    [],
    [[bigint[], bigint] & { secretIds: bigint[]; activeCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSecret"
  ): TypedContractMethod<[secretId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSecretCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSecretInfo"
  ): TypedContractMethod<
    [secretId: BigNumberish],
    [
      [string, bigint, boolean] & {
        label: string;
        createdAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "secretExistsForUser"
  ): TypedContractMethod<[secretId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "setStorageFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storageFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "storeSecret"
  ): TypedContractMethod<
    [encryptedSecret: BytesLike, inputProof: BytesLike, label: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateSecret"
  ): TypedContractMethod<
    [secretId: BigNumberish, encryptedSecret: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "SecretDeleted"
  ): TypedContractEvent<
    SecretDeletedEvent.InputTuple,
    SecretDeletedEvent.OutputTuple,
    SecretDeletedEvent.OutputObject
  >;
  getEvent(
    key: "SecretStored"
  ): TypedContractEvent<
    SecretStoredEvent.InputTuple,
    SecretStoredEvent.OutputTuple,
    SecretStoredEvent.OutputObject
  >;
  getEvent(
    key: "SecretUpdated"
  ): TypedContractEvent<
    SecretUpdatedEvent.InputTuple,
    SecretUpdatedEvent.OutputTuple,
    SecretUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StorageFeeChanged"
  ): TypedContractEvent<
    StorageFeeChangedEvent.InputTuple,
    StorageFeeChangedEvent.OutputTuple,
    StorageFeeChangedEvent.OutputObject
  >;

  filters: {
    "FeesWithdrawn(address,uint256)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "SecretDeleted(address,uint256,uint256)": TypedContractEvent<
      SecretDeletedEvent.InputTuple,
      SecretDeletedEvent.OutputTuple,
      SecretDeletedEvent.OutputObject
    >;
    SecretDeleted: TypedContractEvent<
      SecretDeletedEvent.InputTuple,
      SecretDeletedEvent.OutputTuple,
      SecretDeletedEvent.OutputObject
    >;

    "SecretStored(address,uint256,string,uint256)": TypedContractEvent<
      SecretStoredEvent.InputTuple,
      SecretStoredEvent.OutputTuple,
      SecretStoredEvent.OutputObject
    >;
    SecretStored: TypedContractEvent<
      SecretStoredEvent.InputTuple,
      SecretStoredEvent.OutputTuple,
      SecretStoredEvent.OutputObject
    >;

    "SecretUpdated(address,uint256,uint256)": TypedContractEvent<
      SecretUpdatedEvent.InputTuple,
      SecretUpdatedEvent.OutputTuple,
      SecretUpdatedEvent.OutputObject
    >;
    SecretUpdated: TypedContractEvent<
      SecretUpdatedEvent.InputTuple,
      SecretUpdatedEvent.OutputTuple,
      SecretUpdatedEvent.OutputObject
    >;

    "StorageFeeChanged(uint256)": TypedContractEvent<
      StorageFeeChangedEvent.InputTuple,
      StorageFeeChangedEvent.OutputTuple,
      StorageFeeChangedEvent.OutputObject
    >;
    StorageFeeChanged: TypedContractEvent<
      StorageFeeChangedEvent.InputTuple,
      StorageFeeChangedEvent.OutputTuple,
      StorageFeeChangedEvent.OutputObject
    >;
  };
}
